
module Compiler.ClosureIR2 where

open import Base.Prelude

List : ùí∞ ‚Ñì -> ùí∞ ‚Ñì
List A = ‚àë Vec A

data BaseTy : ùí∞‚ÇÄ where
  BB : BaseTy

data Ty : ùí∞‚ÇÄ where
  Œπ : BaseTy -> Ty
  _‚áí_ : Ty -> Ty -> Ty

_,,_ : ‚àÄ{A : ùí∞ ‚Ñì} -> List A -> A -> List A
(_ , Œì) ,, A = (_ , A ‚à∑ Œì)

infixl 55 _,,_
-- syntax n , Œì ,, A = suc n , A ‚à∑ Œì
-- pattern (A ‚à∑ (n , Œì)) = 

Ctx = List Ty

infixr 70 _‚áí_
infixr 50 _‚ä¢_

_‚àà_ : ‚àÄ{A : ùí∞ ‚Ñì} (e : A) (v : List A) -> ùí∞ ‚Ñì -- -> (i : Fin (fst v)) -> A
_‚àà_ e (_ , v) = ‚àë Œª i -> lookup v i == e

-- syntax Elem V i = i ‚àà V

pattern empty = (_ , [])

data _‚ä¢_ : Ctx -> Ty -> ùí∞‚ÇÄ where
  app : ‚àÄ{Œì A B} -> Œì ‚ä¢ A ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B
  lam : ‚àÄ{Œì A B} -> Œì ,, A ‚ä¢ B -> Œì ‚ä¢ A ‚áí B
  var : ‚àÄ{Œì A} -> A ‚àà Œì -> Œì ‚ä¢ A

-- FunTy : (Œì : Ctx) -> (A : Ty) -> ùí∞‚ÇÄ
-- FunTy 

CloTy : ùí∞‚ÇÄ
CloTy = List Ty √ó BaseTy

toCloTy : Ty -> CloTy
toCloTy (Œπ x) = empty , x
toCloTy (A ‚áí B) = let (Bs , B) = toCloTy B in (Bs ,, A , B)

data Value : Ctx -> Ty -> ùí∞‚ÇÄ
data Function : Ctx -> CloTy -> ùí∞‚ÇÄ where

data Value where

compileFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ A) -> Function Œì (toCloTy A)
compileFun t = {!!}

  -- call : ‚àÄ{Œì A B} -> Value Œì (A ‚áí B) -> Value Œì A -> Function Œì B
  -- call : ‚àÄ{Œì A B} -> Value Œì A -> 
  -- defer : ‚àÄ{Œì A B} -> Value (Œì ,, A) B -> Function Œì (A ‚áí B)
  -- call : ‚àÄ{Œì A B} -> Value (Œì ,, Œπ A) (Œπ B) -> Function Œì A -> Function (Œì) B


  -- proj : ‚àÄ{Œì A} -> A ‚àà Œì -> Function Œì A
  -- set‚ÇÄ : ‚àÄ{Œì A B} -> Value Œì (A ‚áí B) -> Value Œì A -> Function Œì B
  -- val : ‚àÄ{Œì A} -> Function Œì A -> Value Œì (A)
  -- -- defer : ‚àÄ{Œì A B} -> Value (Œì ,, A) B -> Function Œì (A ‚áí B)
  -- defer : ‚àÄ{Œì A B} -> Value (Œì ,, A) B -> Value Œì (A ‚áí B)
  -- proj : ‚àÄ{Œì A} -> A ‚àà Œì -> Value Œì A
  -- app : ‚àÄ{Œì A B} -> Value (Œì ,, Œπ A) B -> Function Œì A -> Value Œì B

-- compileT : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ A) -> ùí∞‚ÇÄ
-- compileT = ?

-- FunctionH : Ctx -> Ty -> ùí∞‚ÇÄ
-- FunctionH Œì (Œπ x) = Function Œì (Œπ x)
-- FunctionH Œì (A ‚áí B) = FunctionH (Œì ,, A) B

-- set‚ÇÄH : ‚àÄ{Œì A B} -> Value Œì (A ‚áí B) -> Value Œì A -> FunctionH Œì B
-- set‚ÇÄH {Œì} {A} {Œπ x} t s = {!!}
-- set‚ÇÄH {Œì} {A} {B ‚áí B‚ÇÅ} t s = {!!}

-- compileVal : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ A) -> Value Œì A
-- compileValLam : ‚àÄ{Œì A B} -> (t : Œì ,, A ‚ä¢ B) -> Value Œì (A ‚áí B)
-- compileValApp : ‚àÄ{Œì A B} -> (t : Œì ‚ä¢ A ‚áí B) (s : Œì ‚ä¢ A) -> Value Œì B

-- compileFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ Œπ A) -> Function Œì (Œπ A)
-- -- compileFun {Œì} {Œπ x} (app t s) = set‚ÇÄ (compileVal t) (compileVal s)
-- -- compileFun {Œì} {A ‚áí A‚ÇÅ} (app t s) = {!!}
-- compileFun {Œì} {A} (app t s) = set‚ÇÄ (compileVal t) (compileVal s)
-- -- compileFun {Œì} {A ‚áí B} (lam t) = defer (val (set‚ÇÄ ({!!}) {!!}))  -- (val (compileFun t)) ?
-- -- set‚ÇÄ (defer (val {!!})) {!!}  -- (val (compileFun t)) ?
-- compileFun (var x) = proj x

-- compileVal (app t s) = compileValApp t s -- val (compileFun (app t t‚ÇÅ))
-- compileVal (lam t) = compileValLam t
--   -- let f = compileVal t
--   -- in ({!!})
-- compileVal (var x) = {!!}

-- compileValLam {Œì} {A} {Œπ x} t = let t1 = compileFun t in (defer (val t1))
-- compileValLam {Œì} {A} {B ‚áí B‚ÇÅ} (app t t‚ÇÅ) = defer (compileVal (app t t‚ÇÅ))
-- compileValLam {Œì} {A} {B ‚áí B‚ÇÅ} (lam t) = defer (compileValLam t)
-- compileValLam {Œì} {A} {B ‚áí B‚ÇÅ} (var x) = defer (compileVal (var x))

-- compileValApp {Œì} {A} {Œπ x} t s = val (compileFun (app t s))
-- compileValApp {Œì} {A} {B ‚áí B‚ÇÅ} t = {!!}
