
module Compiler.ClosureIR3 where

open import Base.Prelude

List : ùí∞ ‚Ñì -> ùí∞ ‚Ñì
List A = ‚àë Vec A

data BaseTy : ùí∞‚ÇÄ where
  BB : BaseTy

data Ty : ùí∞‚ÇÄ where
  Œπ : BaseTy -> Ty
  _‚áí_ : Ty -> Ty -> Ty

_,,_ : ‚àÄ{A : ùí∞ ‚Ñì} -> List A -> A -> List A
(_ , Œì) ,, A = (_ , A ‚à∑ Œì)

infixl 55 _,,_
-- syntax n , Œì ,, A = suc n , A ‚à∑ Œì
-- pattern (A ‚à∑ (n , Œì)) = 

Ctx = List Ty

infixr 70 _‚áí_
infixr 50 _‚ä¢_

_‚àà_ : ‚àÄ{A : ùí∞ ‚Ñì} (e : A) (v : List A) -> ùí∞ ‚Ñì -- -> (i : Fin (fst v)) -> A
_‚àà_ e (_ , v) = ‚àë Œª i -> lookup v i == e

-- syntax Elem V i = i ‚àà V

pattern empty = (_ , [])

data _‚ä¢_ : Ctx -> Ty -> ùí∞‚ÇÄ where
  app : ‚àÄ{Œì A B} -> Œì ‚ä¢ A ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B
  lam : ‚àÄ{Œì A B} -> Œì ,, A ‚ä¢ B -> Œì ‚ä¢ A ‚áí B
  var : ‚àÄ{Œì A} -> A ‚àà Œì -> Œì ‚ä¢ A

data RetTy : ùí∞‚ÇÄ where
  Œπ : BaseTy -> RetTy
  Closure : Ctx -> Ctx -> BaseTy -> RetTy

data Function : Ctx -> RetTy -> ùí∞‚ÇÄ where
  makeClosure : ‚àÄ{Œì A} -> Function Œì (Œπ A) -> Function Œì (Closure Œì empty A)

CT : Ty -> Ctx √ó BaseTy
CT (Œπ A) = empty , A
CT (A ‚áí B) =
  let (As , R) = CT B
  in (As ,, A , R)

writeFunT : Ctx -> Ty -> ùí∞‚ÇÄ
writeFunT Œì A = let (As , R) = CT A in Function Œì (Closure Œì As R)

writeBaseFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ Œπ A) -> Function Œì (Œπ A)
writeBaseFun = {!!}

writeFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ A) -> writeFunT Œì A
writeFun {Œì} {Œπ x} t = makeClosure (writeBaseFun t)
writeFun {Œì} {A ‚áí B} t = {!!}


-- writeFunT : Ctx -> Ty -> ùí∞‚ÇÄ
-- writeFunT Œì (Œπ A) = Function Œì (Œπ A)
-- writeFunT Œì (A ‚áí B) = Function Œì (Closure Œì (_ , A ‚à∑ []) B)


-- writeFunT : Ctx -> Ty -> ùí∞‚ÇÄ
-- writeFunT Œì (Œπ A) = Function Œì (Œπ A)
-- writeFunT Œì (A ‚áí B) = Function Œì (Closure Œì (_ , A ‚à∑ []) B)

-- writeFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ A) -> writeFunT Œì A 

-- writeBaseFun : ‚àÄ{Œì A} -> (t : Œì ‚ä¢ Œπ A) -> Function Œì (Œπ A)
-- writeBaseFun (app t t‚ÇÅ) = {!!}
-- writeBaseFun (var x) = {!!}

-- writeArrFun : ‚àÄ{Œì A B} -> (t : Œì ‚ä¢ A ‚áí B) -> Function Œì (Closure Œì (_ , A ‚à∑ []) B)
-- writeArrFun (app t s) =
--   let t2 = writeArrFun t
--       s2 = writeFun s
--   in {!!}
-- writeArrFun (lam t) = {!!}
-- writeArrFun (var x) = {!!}

-- writeFun {A = Œπ x} t = writeBaseFun t
-- writeFun {A = A ‚áí A‚ÇÅ} t = writeArrFun t



